---
layout: poslay
title: JavaScript花式玩法『肆』———诡异特性（隐式转换与分号插入篇）
label: 酷玩JavaScript
kind: label-important
ptr: JavaScript
mdmark: ran
metakey: JavaScript,酷玩,教程,SouFii,blog,个人博客
metades: JavaScript花式玩法『肆』———诡异特性（隐式转换与分号插入篇），SouFii的博客
---



在这篇PO中，我会把总结的JavaScript的‘诡异特性’或者说是‘坑爹的性质’一一解释。（其实坑爹才是JS中真正技巧的源泉！~）

##自动分号插入机制
这个想必学JS都清楚，JavaScript不会强制要求你在每行的末尾加分号（即便这不是个好习惯），因为其解释器或者说引擎提供了这样一种分号检查机制：

首先判断一行是否可以结束，如果不能结束链接下一行，且不在当前行末加分号；如果可以看作结束————>若行末未加分号，则帮你加分号，否则跳过检查。基于这个规则，诞生了以下的陷阱：

	var a = b + x
	    (m + n).export()   //将被解释器解释为：var a = b + x(m + n).export();

	return
	    {
	        ....
	    }               
	    //在前几个PO中有提到过。这个return可能不会返回你想要的对象{...}，而是undefined，因为解释器会在return后自动加入分号，导致在return出函数结束并返回，所以后面的对象是不会被看到的。

##隐式转换之坑
所谓隐式转换，即在你没让他类型转换时他却自作主张的给你转换了数据类型。	
这种情况经常出现，主要发生在变量的 **赋值运算** 、 **非严格的比较** 过程中。		
首先看一系列的变量运算：

	var a = ![];  //false
	var b = !{};  //false
	var c = ![{}];  //false
	var d = !'';  //true
	var e = !0;   //true
	var f = !1;   //false
	var g = !'0'; //false
	var h = !function () {};  //false
	var r = !NaN;  //true
	var s = !null;  //true
	var t = !undefined;  //true
	var i = +[];  //0
	var j = +{};  //NaN
	var k = +[0];  //0
	var l = +[1];  //1
	var m = +[2];  //2
	var n = +['2'];  //2
	var o = +function () {};  //NaN
	var p = +[null];      //0
	var q = +[undefined];  //0
	var u = +[{}];   //NaN
	var v = +[1, 2];   //NaN
	var w = [] + {};  //'[object Object]'
	var x = [] + [5];  //'5'

先举这么多例子，以上都是隐式类型转换，我分了三块例子，看出了么？：

	'！'、'(+/-）'、'op1 + op2'

关于变量运算中的**隐式转换后的类型**总结如下：

1. 取否运算符！可以把任意数据类型变量转化为布尔型（boolean）
2. 一元+/-运算符可以将除了数值型数据以外的任意数据类型的变量转化为数值型（number）
3. 二元+运算符可以将除了两个变量都是数值型数据以外的大多数数据类型变量转化为字符串型（string）

转化就这么简单，但是经过隐式转化后变量的值具体变成了什么同样是我们最关心的！

例如：二元+运算符得到的字符串是什么？这不好说。经过我在chrome下的测试得到如下关于变量运算中的**隐式转换后的值**的总结

**取否运算符！：**  
	
	对0、''、' '、'\t\n等相当于空格的符号'、NaN、null、undefined返回布尔值true；
	其余所有类型都返回布尔值false

**一元+/-运算符：**  
	
	对空数组[]、[[]]、[0]、['0']、[null]、[undefined]返回数字0；
	对[数字]、['数字']返回其中的数字；
	对{}、[对象/布尔值/函数字面量]、[x, y,....]、[NaN]、function(){}返回NaN

**二元+运算符：**  
	
	其中一个op若为[数值]、[字符串]、[布尔值]、'数值'其中之一,则会被转化成数组内元素的字符串;
	其中一个op若为{...}、[{...}]，则被转化为'[object Object]';
	其中一个op若为[]、[[]]、[null]、[undefined]，则被转化为'';
	其中一个op若为[函数字面量]，则被转化为函数源代码的字符串;
	其中一个op若为[x, y,....]，则会按以上的规则，首先将x，y，z....转换为相应的字符串，然后通过','相连组成一个字符串'字符串a,字符串b,字符串c,....';
	然后op字符串等待与第二个op字符串相连，最终形成一个字符串；

**二元+运算符中的反例：**  
	
	上面我说过，只有大部分类型通过二元+运算可以转化为字符串，但还有部分特殊类型并不满足这个规则：
	当其中一个操作符为null，另一个为数值时，转化结果为该数值；另一个若是null，结果转化为数值0；另一个若是undefined，则结果是NaN；另一个若是其它类型，则为'null'拼接的字符串；
	当其中一个操作符为undefined，另一个若是数值、null、NaN、undefined转化为NaN；另一个若是其它类型，则转化为'undefined'拼接的字符串；
	当其中一个操作符是NaN，另一个若不是数值、null、NaN、undefined，则转化为'NaN'拼接的字符串；否则返回NaN；
	当两个操作数都为数值，则变为普通的算数运算。

该有的常见类型应该全了。但再怎么说这些复杂的转化只是表面现象，没几个人会去记这些规律，至于为什么会有这种特性，要研究‘对象’，‘字符串’以及‘数值’之间的是如何转化的，下一个PO会深入说明